---
---
@article{Coward2020arith,
   abstract = {Creating optimized hardware for error tolerant applications presents significant challenges as well as opportunities. Many algorithms in computer graphics & vision are error tolerant, as their application level correctness ultimately rests on human perception. This error tolerance can be exploited in reducing hardware implementation cost. The challenge is how to explore the space of application level correct designs to determine the optimized hardware architecture. This paper puts forward an approach to automatically explore the space which maximally exploits the acceptable error to minimize hardware cost for a particular graphics algorithm - Level-Of-Detail. Results, so far, have shown a 26% hardware area improvement.},
   author = {S. Coward and T. Drane and Y. Harel},
   doi = {10.1109/ARITH48897.2020.00025},
   isbn = {9781728171203},
   journal = {Proceedings - Symposium on Computer Arithmetic},
   keywords = {accuracy hardware tradeoffs,approximate computing,computer graphics,design automation,floating-point,multiple-precision,numerical analysis,power-efficient},
   title = {Automatic Design Space Exploration for an Error Tolerant Application},
   volume = {2020-June},
   year = {2020},
   html = {https://ieeexplore.ieee.org/document/9154483}
}
@article{Coward2022arith,
   abbr = {ARITH 22},
   abstract = {Manual optimization of Register Transfer Level (RTL) datapath is commonplace in industry but holds back development as it can be very time consuming. We utilize the fact that a complex transformation of one RTL into another equivalent RTL can be broken down into a sequence of smaller, localized transformations. By representing RTL as a graph and deploying modern graph rewriting techniques we can automate the circuit design space exploration, allowing us to discover functionally equivalent but optimized architectures. We demonstrate that modern rewriting frameworks can adequately capture a wide variety of complex optimizations performed by human designers on bit-vector manipulating code, including significant error-prone subtleties regarding the validity of transformations under complex interactions of bitwidths. The proposed automated optimization approach is able to reproduce the results of typical industrial manual optimization, resulting in a reduction in circuit area by up to 71%. Not only does our tool discover optimized RTL, but also correctly identifies that the optimal architecture to implement a given arithmetic expression can depend on the width of the operands, thus producing a library of optimized designs rather than the single design point typically generated by manual optimization. In addition, we demonstrate that prior academic work on maximally exploiting carry-save representation and on multiple constant multiplication are both generalized and extended, falling out as special cases of this paper.},
   author = {S. Coward and G.A. Constantinides and T. Drane},
   doi = {10.1109/ARITH54963.2022.00016},
   isbn = {9781665478274},
   journal = {Proceedings - Symposium on Computer Arithmetic},
   keywords = {datapath design,design automation,hardware optimization},
   title = {Automatic Datapath Optimization using E-Graphs},
   volume = {2022-Septe},
   year = {2022},
   html = {https://ieeexplore.ieee.org/document/9974492},
   selected={true}
}
@article{Flatt2022fmcad,
   abbr = {FMCAD 22},
   abstract = {Satisfiability Modulo Theory (SMT) solvers and equality saturation engines must generate proof certificates from e-graph-based congruence closure procedures to enable verification and conflict clause generation. Smaller proof certificates speed up these activities. Though the problem of generating proofs of minimal size is known to be NP-complete, existing proof minimization algorithms for congruence closure generate unnecessarily large proofs and introduce asymptotic overhead over the core congruence closure procedure. In this paper, we introduce an O(n5) time algorithm which generates optimal proofs under a new relaxed "proof tree size"metric that directly bounds proof size. We then relax this approach further to a practical O(n log(n)) greedy algorithm which generates small proofs with no asymptotic overhead. We implemented our techniques in the egg equality saturation toolkit, yielding the first certifying equality saturation engine. We show that our greedy approach in egg quickly generates substantially smaller proofs than the state-of-the-art Z3 SMT solver on a corpus of 3760 benchmarks.},
   author = {O. Flatt and S. Coward and M. Willsey and Z. Tatlock and P. Panchekha},
   doi = {10.34727/2022/isbn.978-3-85448-053-2-13},
   isbn = {9783854480532},
   journal = {Proceedings of the 22nd Conference on Formal Methods in Computer-Aided Design, FMCAD 2022},
   title = {Small Proofs from Congruence Closure},
   year = {2022},
   html = {https://repositum.tuwien.at/handle/20.500.12708/81325},
   selected={true}
}
@article{Coward2022formalsaspects,
   abstract = {We present a method for formal verification of transcendental hardware and software algorithms that scales to higher precision without suffering an exponential growth in runtimes. A class of implementations using piecewise polynomial approximation to compute the result is verified using MetiTarski, an automated theorem prover, which verifies a range of inputs for each call. The method was applied to commercial implementations from Cadence Design Systems with significant runtime gains over exhaustive testing methods and was successful in proving that the expected accuracy of one implementation was overly optimistic. Reproducing the verification of a sine implementation in software, previously done using an alternative theorem-proving technique, demonstrates that the MetiTarski approach is a viable competitor. Verification of a 52-bit implementation of the square root function highlights the method's high-precision capabilities.},
   author = {S. Coward and L. Paulson and T. Drane and E. Morini},
   doi = {10.1145/3543670},
   issn = {1433299X},
   issue = {2},
   journal = {Formal Aspects of Computing},
   keywords = {Theorem prover,floating-point algorithms,transcendental functions},
   title = {Formal Verification of Transcendental Fixed- and Floating-point Algorithms using an Automatic Theorem Prover},
   volume = {34},
   year = {2022},
   html = {https://dl.acm.org/doi/full/10.1145/3543670},
}

@article{Coward2023AutomatingCD,
  abbr = {DAC 23},
  title={Automating Constraint-Aware Datapath Optimization using E-Graphs},
  author={Samuel Coward and George A. Constantinides and Theo Drane},
  journal={2023 60th ACM/IEEE Design Automation Conference (DAC)},
  year={2023},
  pages={1-6},
  url={https://api.semanticscholar.org/CorpusID:257353847},
  selected={true}
}

@article{Orloski2023asp-dac,
   abstract = {Hardware implementations of elementary functions regularly deploy piecewise polynomial approximations. This work determines the complete design space of piecewise polynomial approximations meeting a given accuracy specification. Knowledge of this design space determines the minimum number of regions required to approximate the function accurately enough and facilitates the generation of optimized hardware which is competitive against the state of the art. Designers can explore the space of feasible architectures without needing to validate their choices. A heuristic based decision procedure is proposed to generate optimal ASIC hardware designs. Targeting alternative hardware technologies simply requires a modified decision procedure to explore the space. We highlight the difficulty in choosing an optimal number of regions to approximate the function with, as this is input width dependent.},
   author = {B. Orloski and S. Coward and T. Drane},
   doi = {10.1145/3566097.3567840},
   isbn = {9781450397834},
   journal = {Proceedings of the Asia and South Pacific Design Automation Conference, ASP-DAC},
   keywords = {datapath design,elementary function,polynomial interpolation},
   title = {Automatic Generation of Complete Polynomial Interpolation Design Space for Hardware Architectures},
   year = {2023},
   html = {https://ieeexplore.ieee.org/document/10044827},
}

@inproceedings{coward2023datapath,
  title={Datapath Verification via Word-Level E-Graph Rewriting},
  author={Coward, Samuel and Morini, Emiliano and Tan, Bryan and Drane, Theo and Constantinides, George A},
  booktitle={CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN--FMCAD 2023},
  pages={92},
  url={https://library.oapen.org/bitstream/handle/20.500.12657/85158/1/Nadel-2023-Proceedings%20of%20the%2023rd%20Conference%20on%20Formal%20Methods%20in%20Comput...-vor.pdf#page=106}
}

@inproceedings{coward2023combining,
  title={Combining E-Graphs with Abstract Interpretation},
  author={Coward, Samuel and Constantinides, George A and Drane, Theo},
  booktitle={Proceedings of the 12th ACM SIGPLAN International Workshop on the State Of the Art in Program Analysis},
  pages={1--7},
  year={2023},
  html = {https://dl.acm.org/doi/10.1145/3589250.3596144}
}